--- client_shared.c	2018-01-31 13:43:31.000000000 +0000
+++ /Users/cigdem/Development/mqtt-trials/mosquitto/client/client_shared.c	2018-01-26 13:41:43.000000000 +0000
@@ -57,6 +57,7 @@
 	free(cfg->bind_address);
 	free(cfg->username);
 	free(cfg->password);
+	free(cfg->alg);
 	free(cfg->will_topic);
 	free(cfg->will_payload);
 #ifdef WITH_TLS
@@ -586,7 +587,19 @@
 				cfg->password = strdup(argv[i+1]);
 			}
 			i++;
-		}else if(!strcmp(argv[i], "--will-payload")){
+	
+#ifdef _ACE
+		} else if (!strcmp(argv[i], "--alg")){
+			if(i==argc-1){
+				fprintf(stderr, "Error: --alg argument given but no algorithm specified.\n\n");
+				return 1;
+			} else {
+				cfg->alg = strdup(argv[i+1]);
+			}
+			i++;
+		
+#endif
+		} else if(!strcmp(argv[i], "--will-payload")){
 			if(i==argc-1){
 				fprintf(stderr, "Error: --will-payload argument given but no will payload specified.\n\n");
 				return 1;
@@ -665,11 +678,80 @@
 		mosquitto_lib_cleanup();
 		return 1;
 	}
+
+#ifdef _ACE
+	if(cfg->username && cfg->password){
+		//Take the password as shared key
+		//Take the username as token
+		//calculate the hash of token with shared key
+		//update the cfg->password as mac
+
+		/* ACE variables*/
+		const EVP_MD *digest;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+	        EVP_MD_CTX context;
+#else
+	        EVP_MD_CTX *context;
+#endif
+		unsigned char hash[EVP_MAX_MD_SIZE];
+        	unsigned int hash_len;
+
+        	char  *encoded_hash=NULL;
+
+		//Read token and key
+		char *token = cfg->username;
+		char *key =   cfg->password;
+	  
+		char *alg = "sha256"; 
+		if (cfg->alg)
+			alg = "sha256"; 		
+
+		//Digest token with the key 
+		//ToDo: Support other schemes.
+		digest = EVP_get_digestbyname(alg);
+		if(!digest){
+           		fprintf(stderr, "Error: Unable to create openssl digest.\n");
+           		return 1;
+		}
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+	        EVP_MD_CTX_init(&context);
+        	EVP_DigestInit_ex(&context, digest, NULL);
+        	EVP_DigestUpdate(&context, token, strlen(token));
+		if(key){
+	  		EVP_DigestUpdate(&context, key, strlen(key));
+		}
+        	EVP_DigestFinal_ex(&context, hash, &hash_len);
+        	EVP_MD_CTX_cleanup(&context);
+#else
+        	context = EVP_MD_CTX_new();
+        	EVP_DigestInit_ex(context, digest, NULL);
+        	EVP_DigestUpdate(context, token, strlen(token));
+		if(key){
+	  		EVP_DigestUpdate(context, key, strlen(key));
+		}
+        	EVP_DigestFinal_ex(context, hash, &hash_len);
+        	EVP_MD_CTX_free(context);
+#endif
+	
+       		int ace_result = base64_encode(hash, hash_len, &encoded_hash);
+       		if(ace_result){
+	 	if(encoded_hash) free(encoded_hash);
+	 		fprintf(stderr, "Error: Unable to encode test.\n");
+         		return 1;
+       		} else {
+	 		//fprintf(stderr, "Success: encoded digested test: %s\n",encoded_hash );
+       		}
+
+       		cfg->password = encoded_hash;
+       }
+#endif //ACE
+	
 	if(cfg->username && mosquitto_username_pw_set(mosq, cfg->username, cfg->password)){
 		if(!cfg->quiet) fprintf(stderr, "Error: Problem setting username and password.\n");
 		mosquitto_lib_cleanup();
 		return 1;
 	}
+	
 #ifdef WITH_TLS
 	if((cfg->cafile || cfg->capath)
 			&& mosquitto_tls_set(mosq, cfg->cafile, cfg->capath, cfg->certfile, cfg->keyfile, NULL)){
@@ -690,7 +772,7 @@
 		return 1;
 	}
 #  endif
-	if((cfg->tls_version || cfg->ciphers) && mosquitto_tls_opts_set(mosq, 1, cfg->tls_version, cfg->ciphers)){
+	if(cfg->tls_version && mosquitto_tls_opts_set(mosq, 1, cfg->tls_version, cfg->ciphers)){
 		if(!cfg->quiet) fprintf(stderr, "Error: Problem setting TLS options.\n");
 		mosquitto_lib_cleanup();
 		return 1;
@@ -727,14 +809,19 @@
 		hostname[0] = '\0';
 		gethostname(hostname, 256);
 		hostname[255] = '\0';
-		len = strlen(id_base) + strlen("|-") + 6 + strlen(hostname);
+		len = strlen(id_base) + strlen("/-") + 6 + strlen(hostname);
 		cfg->id = malloc(len);
 		if(!cfg->id){
 			if(!cfg->quiet) fprintf(stderr, "Error: Out of memory.\n");
 			mosquitto_lib_cleanup();
 			return 1;
 		}
-		snprintf(cfg->id, len, "%s|%d-%s", id_base, getpid(), hostname);
+
+#ifdef _ACE
+		snprintf(cfg->id, len, "%s-%d-%s", id_base, getpid(), hostname);
+#else
+		snprintf(cfg->id, len, "%s/%d-%s", id_base, getpid(), hostname);
+#endif
 		if(strlen(cfg->id) > MOSQ_MQTT_ID_MAX_LENGTH){
 			/* Enforce maximum client id length of 23 characters */
 			cfg->id[MOSQ_MQTT_ID_MAX_LENGTH] = '\0';
@@ -924,10 +1011,6 @@
 			port[len] = '\0';
 		}else{
 			host = malloc(len + 1);
-			if(!host){
-				fprintf(stderr, "Error: Out of memory.\n");
-				goto cleanup;
-			}
 			memcpy(host, &(str[start]), len);
 			host[len] = '\0';
 		}
@@ -970,4 +1053,36 @@
 	return 1;
 }
 
+/* ACE additions */
+/* Repeat Implementation from src/mosquitto_passwd.c */
+#ifdef _ACE
+int base64_encode(unsigned char *in, unsigned int in_len, char **encoded){
+  BIO *bmem, *b64;
+  BUF_MEM *bptr;
+
+  b64 = BIO_new(BIO_f_base64());
+  BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+  bmem = BIO_new(BIO_s_mem());
+  b64 = BIO_push(b64, bmem);
+  BIO_write(b64, in, in_len);
+  if(BIO_flush(b64) != 1){
+     BIO_free_all(b64);
+     return 1;
+  }
+  BIO_get_mem_ptr(b64, &bptr);
+  *encoded = malloc(bptr->length+1);
+  if(!(*encoded)){
+       BIO_free_all(b64);
+       return 1;
+  }
+  memcpy(*encoded, bptr->data, bptr->length);
+  (*encoded)[bptr->length] = '\0';
+  BIO_free_all(b64);
+
+  return 0;
+
+}
+#endif //ACE
+/*************************/
+
 #endif
